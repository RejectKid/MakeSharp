#r "..\src\packages\MakeSharp.1.3.0\tools\MakeSharp.Windows.Helpers.dll"
using System;
using System.Collections.Generic;
using System.Reflection;
using CavemanTools;
using MakeSharp;
using MakeSharp.Windows.Helpers;


//class h
//{
//    void b()
//    {

//script has arguments: v=[version] [push]
//push is to publish nugets

        Project.StaticName = "____";
        Solution.FileName = @"..\src\"+Project.StaticName+".sln";  
        
		Project.Current.DepsList.Add("CavemanTools");
    
        
		Project.Current.AssemblyExtension = "dll";


//    }
//}



public class clean
 {
     public void Run()
     {
        BuildScript.TempDirectory.CleanupDir();
      
      Solution.Instance.FilePath.MsBuildClean();
    }

   
}

public class UpdateVersion
{
    public ITaskContext Context { get; set; }
    public void Run()
    {
        var ver = Context.InitData.Get<string>("v");
        if (ver == null)
        {
            GetVersion();
            return;
        }
        var info = Project.Current.GetAssemblyInfo();
        info.Info.Version = info.Info.FileVersion = ver;
        info.Save();
       ("Version updated to "+ver).ToConsole();
        Context.Data["version"] = ver;
    }

    void GetVersion()
    {
        var info=Project.Current.GetAssemblyInfo();
        Context.Data["version"] = info.Info.Version;
        ("Using version "+info.Info.Version).ToConsole();
    }
}

[Default]
[Depends("clean","UpdateVersion")]
public class build
{
    public ITaskContext Context { get; set; }

    public void Run()
    {
        Solution.Instance.FilePath.MsBuildRelease();
    }
}


[Depends("build")]
public class pack
{
    public ITaskContext Context { get; set; }


    public void Run()
    {
        "template.nuspec".CreateNuget(s =>
        {
            s.Metadata.Version = Context.Data["version"].ToString();
            if (Context.InitData.HasArgument("pre"))
            {
                s.Metadata.Version += "-pre";
            }
            foreach (var dep in Project.Current.DepsList)
            {
                var ver = Project.Current.ReleasePathForAssembly(dep+".dll").GetAssemblyVersion();
                s.AddDependency(dep, ver.ToString(3));
            }
                      
        }, p =>
        {
            p.OutputDir = BuildScript.TempDirName;
            p.BasePath = Project.Current.Directory;
          
            p.BuildSymbols = true;
            p.Publish = Context.InitData.HasArgument("push");

        });
     
    }
}








