/* make# is using scriptcs so you can use #r to reference assemblies and #load to include other scripts */
//#r "[path_to]mycustom.dll"
//#load "other_scripts.csx"

/* System ; System.IO; MakeSharp; CavemanTools; Nuget namespaces are included by default, you don't need to include them */

/* By default any public class is a task and each task must have a "Run" method with no arguments. A public class ending with _ is considered a poco.
 * You can change the conventions for what type is considered a task 
 * and that method is considered the task entry point with the following code
 */
//Make.Configure
//            .TasksAre(type =>  /* match */)
//            .MethodToExecute(method =>  /* match */);


/* the following helper classes are avaialable: BuildScript, Solution, Project. 
 * Make# scripts are intended to be created with en editor supporting intellisense */

/* For one Solution */
//Solution.FileName="path to name.sln";

/*  For one project */
// Project.StaticName="projectName";

// deps for nuget if any. Only the name of the assembly
//Project.Current.DepsList.Add("CavemanTools");


public class cleanUp
{
    public void Run()
    {
       BuildScript.TempDirectory.CleanupDir();
        Solution.Instance.FilePath.MsBuildClean();         
    }
    
}

//requires script argument v=[semantic version], e.g v=1.2.0  or
// bump=[minor|patch]
public class UpdateVersion
{
    public ITaskContext Context { get; set; }
    public void Run()
    {
          var ver = Context.InitData.Get<string>("v");
		if (ver == null)
        {
			//bump=minor|patch
			var bump=Context.InitData.Get<string>("bump");			
			ver=GetVersion(bump);
			if (bump==null) return;
        }
        var info = Project.Current.GetAssemblyInfo();
       
       
        info.Info.Version = info.Info.FileVersion = ver;
        info.Save();
      
        ("Version updated to "+ver).ToConsole();
        Context.Data["version"] = ver;
    }

    string GetVersion(string bump=null)
    {
        var info=Project.Current.GetAssemblyInfo();
		if (bump=="minor") info.Info.BumpMinorVersion();
		if (bump=="patch") info.Info.BumpPatchVersion();
		Context.Data["version"] = info.Info.Version;
        ("Using version "+info.Info.Version).ToConsole();
		return info.Info.Version;
    }
}

[Default] //default task. Only one task can be default
//multiple deps: [Depends("Task1","Task2")]
[Depends("cleanUp","UpdateVersion")] 
public class build
{
   /* advanced usage*/
    //public build(IConfigureTask cfg)
    //{
    //    cfg.Always.DependOn<cleanUp>();
    //    cfg.When(init=> init.ScriptParams[0]=="something").DontExecute();
    //}

    /* Get context injected to have access to script parameters and a Data object to pass values to the next task */
    //public ITaskContext Context { get; set; }

    public void Run()
    {
        Solution.Instance.FilePath.MsBuildRelease();
        //Context.Data["value"] = "some result";
    }
}

[Depends("build")]
public class pack
{
    public ITaskContext Context { get; set; }


    public void Run()
    {
        "template.nuspec".CreateNuget(s =>
        {
            s.Metadata.Version = Context.Data["version"].ToString();
			//for pre release
		    if (Context.InitData.HasArgument("pre"))
            {
                s.Metadata.Version += "-pre";
            }
            foreach (var dep in Project.Current.DepsList)
            {
                var ver = Project.Current.ReleasePathForAssembly(dep+".dll").GetAssemblyVersion();
                s.AddDependency(dep, ver.ToString(3));
            }
                      
        }, p =>
        {
            p.OutputDir = BuildScript.TempDirName;
            p.BasePath = Project.Current.Directory;
          
            p.BuildSymbols = false;
            p.Publish = Context.InitData.HasArgument("push");

        });
     
    }
}